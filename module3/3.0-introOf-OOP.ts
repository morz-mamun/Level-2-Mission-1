/**
 * OOP -> Object Oriented Programming.
 * What is OOP -> A programming paradigm that organized models software.

* What is Paradigm? -> The style used to write and organize code. 

*  Important programming paradigm -> 

    1. Procedural Programming Paradigm -> Procedural programming is a coding approach that organizes a computer into a set of structured procedures or functions. These procedures consist of a series of well-defined steps or instructions that are executed sequentially. However, it may lack the flexibility and reusability fo more advanced programming paradigm. 
    
    2. Functional Programming paradigm -> Functional programming is like using a set of building blocks that are like mathematical functions. This helps in making your easier to understand and less likely to have bugs. 

    3. Declarative Programming paradigm -> Declarative programming is an approach to writing computer programs that focuses on describing the desired outcome or result, rather than explicitly specifying the step-by-step instructions to achieve that outcome. In declarative programming, you define what you want to accomplish, and the underlying system or framework figures out how to achieve. 

    4. Object Oriented Programming -> Object-Oriented Programming (OOP) is a programming paradigm that organizes code around objects, which are instances of classes defining data and behavior. In OOP, software is designed by modeling real-world entities as objects, each having attributes (data) and methods (functions) that operate on the data. 

    5. Event Driven Programming -> Event-driven programming paradigm that revolves around responding to events or signals generated by the system or user interactions. In event-driven programming, software is designed to wait for and react to events, such as user clicks, keyboard inputs, or system notifications. 

    Let's be a Versatile programmer. who use every programming paradigm.


    Learn OOP you have to know about build in blocks--> 
    1. Inheritance
    2. Polymorphism
    3. Abstraction
    4. Encapsulation
**/
